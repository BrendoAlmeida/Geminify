import { createInterface } from "readline";
import { promises as fs } from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, "..");
const envPath = path.join(projectRoot, ".env");

interface EnvMap {
  [key: string]: string;
}

function parseEnv(content: string): EnvMap {
  return content
    .split(/\r?\n/)
    .map((line) => line.trim())
    .filter((line) => line && !line.startsWith("#"))
    .reduce<EnvMap>((acc, line) => {
      const [key, ...rest] = line.split("=");
      if (!key) return acc;
      const value = rest.join("=");
      acc[key.trim()] = value.trim();
      return acc;
    }, {});
}

async function readExistingEnv(): Promise<EnvMap> {
  try {
    const raw = await fs.readFile(envPath, "utf8");
    return parseEnv(raw);
  } catch (error) {
    if ((error as NodeJS.ErrnoException)?.code === "ENOENT") {
      return {};
    }
    throw error;
  }
}

async function writeEnvFile(env: EnvMap) {
  const header = `# >>> Generated by scripts/setup.ts on ${new Date().toISOString()}
# Update values by re-running \"npm run setup\" or editing manually.
`;
  const body = [
    `SPOTIFY_CLIENT_ID=${env.SPOTIFY_CLIENT_ID ?? ""}`,
    `SPOTIFY_CLIENT_SECRET=${env.SPOTIFY_CLIENT_SECRET ?? ""}`,
    `SPOTIFY_REDIRECT_URI=${env.SPOTIFY_REDIRECT_URI ?? "http://127.0.0.1:3000/callback"}`,
    `GEMINI_API_KEY=${env.GEMINI_API_KEY ?? ""}`,
  ].join("\n");

  await fs.writeFile(envPath, `${header}\n${body}\n`, "utf8");
}

async function prompt(question: string, fallback?: string): Promise<string> {
  const rl = createInterface({ input: process.stdin, output: process.stdout });
  const suffix = fallback ? ` (${fallback})` : "";
  return new Promise<string>((resolve) => {
    rl.question(`${question}${suffix}: `, (answer) => {
      rl.close();
      const trimmed = answer.trim();
      if (!trimmed && fallback) {
        resolve(fallback);
      } else {
        resolve(trimmed);
      }
    });
  });
}

async function runSetup() {
  console.log("\nðŸ”§ Claudify initial configuration\n");
  console.log("Follow these steps before continuing:");
  console.log(
    "1. Spotify Developer Dashboard â†’ https://developer.spotify.com/dashboard"
  );
  console.log("   â€¢ Create an app or select an existing one.");
  console.log(
    "   â€¢ Add a redirect URI matching http://127.0.0.1:3000/callback (or your preferred local URL)."
  );
  console.log("   â€¢ Copy the Client ID and Client Secret.");
  console.log("2. Google AI Studio â†’ https://makersuite.google.com/ (Generative Language API)");
  console.log("   â€¢ Enable the Generative Language API.");
  console.log("   â€¢ Create an API key (Generative Language API key).");
  console.log("\nPress Enter to continue once you have these values.\n");
  await prompt("Ready to capture credentials", "yes");

  const existing = await readExistingEnv();
  const defaultRedirect =
    existing.SPOTIFY_REDIRECT_URI || "http://127.0.0.1:3000/callback";

  const spotifyClientId = await prompt(
    "Spotify Client ID",
    existing.SPOTIFY_CLIENT_ID
  );
  const spotifyClientSecret = await prompt(
    "Spotify Client Secret",
    existing.SPOTIFY_CLIENT_SECRET
  );
  const spotifyRedirectUri = await prompt(
    "Spotify Redirect URI",
    defaultRedirect
  );
  const geminiApiKey = await prompt("Gemini API Key", existing.GEMINI_API_KEY);

  const env: EnvMap = {
    SPOTIFY_CLIENT_ID: spotifyClientId,
    SPOTIFY_CLIENT_SECRET: spotifyClientSecret,
    SPOTIFY_REDIRECT_URI: spotifyRedirectUri,
    GEMINI_API_KEY: geminiApiKey,
  };

  await writeEnvFile(env);

  console.log("\nâœ… .env updated at", envPath);
  console.log(
    "You can rerun \"npm run setup\" anytime to update Spotify or Gemini credentials."
  );
  console.log("\nNext steps:");
  console.log("  â€¢ npm install");
  console.log("  â€¢ npm run dev");
  console.log("  â€¢ Visit http://localhost:3000 and log in with Spotify.\n");
}

runSetup().catch((error) => {
  console.error("Setup failed:", error);
  process.exitCode = 1;
});
